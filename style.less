@color: #063;
@circle-radius: 20px;
@distance: 140px;
@count: 12;
@toggle-radius: 40px;
* {
    padding: 0;
    margin: 0;
}

body {
    background-color: #ffc;
}

.center() {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

.radius(@radius, @color: transparent) {
    width: @radius * 2;
    height: @radius * 2;
    border-radius: @radius;
    background-color: @color;
    box-sizing: border-box;
}

.generate-circle(@i: 1) when (@i < @count + 1) {
    & ~ .circle:nth-of-type(@{i}) {
        .radius(@circle-radius, @color);
        @top: round(sin(pi() * 2 * (@i - 1)/ @count) * @distance) - @circle-radius;
        @left: round(cos(pi() * 2 * (@i - 1)/ @count) * @distance) - @circle-radius;
        transform: translate(@top, @left);
        line-height: @circle-radius * 2;
        opacity: 1;
        font-size: 1em;
        transition: all 800ms ease;
        &:hover {
            background-color: #033;
        }
    }
    .generate-circle(@i + 1);
}

.container {
    .center();
    .radius(@distance);
    border: 1px dotted #aaa;
}

.circle {
    .radius(0);
    .center();
    font-size: 0;
    opacity: 0;
    cursor: pointer;
    text-align: center;
    color: #ffc;
}

.btn, 
.toggle {
    .radius(@toggle-radius, rgb(0, 51, 51));
    .center();
}

.toggle {
    opacity: 0;
    cursor: pointer;
    &:checked {
        .generate-circle();
    }
}



